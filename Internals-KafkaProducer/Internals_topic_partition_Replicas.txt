# Setup Three node Kafka Brokers and three Zookeepers - multiNode Kafka Cluster

1. Follow KafkaSetup file
2. Create a topic:

bin/kafka-topics.sh --create --bootstrap-server localhost:9092,localhost:9093,localhost:9094 --replication-factor 2 --partitions 3 --topic topic2


3. Describe the topic:

bin/kafka-topics.sh --describe --bootstrap-server localhost:9092,localhost:9093,localhost:9094  --topic topic2

Topic: topic2	TopicId: drGZH_w0QpSMoJHWYuTwBA	PartitionCount: 3	ReplicationFactor: 2	Configs: 
	Topic: topic2	Partition: 0	Leader: 1	Replicas: 1,3	Isr: 1,3	Elr: N/A	LastKnownElr: N/A
	Topic: topic2	Partition: 1	Leader: 2	Replicas: 2,1	Isr: 2,1	Elr: N/A	LastKnownElr: N/A
	Topic: topic2	Partition: 2	Leader: 3	Replicas: 3,2	Isr: 3,2	Elr: N/A	LastKnownElr: N/A


Here we have three Kafka Brokers, three partitions and two replication factor

Partition 0 has two replicas 1(L), 3(F)
-> Leader is responsible for Read and Write Operations
-> ISR are nothing but the subset of replicas,
In the First Partiton 0, ISR is 1,3. Here 1,3 will be in Sync , If the Message is produced in replica 1,the same will be replicated in replica 3 using 
Fetch requests



* What happens Internally if we create a topic

Partition State: (These state are managed by controller Node)

1. NonExistentPartition: Indicates that the partition is either never created or was created and then deleted.
2. New partition: After creation, Partition will be in new Partition state, In this state, the partition should have replicas assigned to it, but no leader/no ISR.
3. Online Partition: Once a leader is elected for a partition, it is in the Online partitions.
4. Offline Partition: If after successfull leader election, the leader for partition dies, then the partition moves to Offline Partition state.

Replica State: (These state are managed by controller Node)

1. New replica: When replicas are created during topic creation or partition reassignment. In this state, a replica can only get become follower state change request.
2. Online replica: Once a replica is started and part of the assigned replicas for its partition, it in this state, it can get either become leader or become follower state change request.
3. Offline replica: If a replica dies, it moves to this state. This happens when the broker hosting the replica is down.
4. NonExistentreplica: If a replica is deleted, It is moved this state.


KAFKA CONTROLLER NODE: In a Kafka Cluster, One of the brokers serves as the controller,
which is responsible for managing the states of partitions and replicas and for performing administrative tasks like reassiging partitions.
